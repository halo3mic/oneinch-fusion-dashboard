// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DefaultFarmSet extends ethereum.Event {
  get params(): DefaultFarmSet__Params {
    return new DefaultFarmSet__Params(this);
  }
}

export class DefaultFarmSet__Params {
  _event: DefaultFarmSet;

  constructor(event: DefaultFarmSet) {
    this._event = event;
  }

  get defaultFarm(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EmergencyExitSet extends ethereum.Event {
  get params(): EmergencyExitSet__Params {
    return new EmergencyExitSet__Params(this);
  }
}

export class EmergencyExitSet__Params {
  _event: EmergencyExitSet;

  constructor(event: EmergencyExitSet) {
    this._event = event;
  }

  get status(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class FeeReceiverSet extends ethereum.Event {
  get params(): FeeReceiverSet__Params {
    return new FeeReceiverSet__Params(this);
  }
}

export class FeeReceiverSet__Params {
  _event: FeeReceiverSet;

  constructor(event: FeeReceiverSet) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MaxLossRatioSet extends ethereum.Event {
  get params(): MaxLossRatioSet__Params {
    return new MaxLossRatioSet__Params(this);
  }
}

export class MaxLossRatioSet__Params {
  _event: MaxLossRatioSet;

  constructor(event: MaxLossRatioSet) {
    this._event = event;
  }

  get ratio(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MinLockPeriodRatioSet extends ethereum.Event {
  get params(): MinLockPeriodRatioSet__Params {
    return new MinLockPeriodRatioSet__Params(this);
  }
}

export class MinLockPeriodRatioSet__Params {
  _event: MinLockPeriodRatioSet;

  constructor(event: MinLockPeriodRatioSet) {
    this._event = event;
  }

  get ratio(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PodAdded extends ethereum.Event {
  get params(): PodAdded__Params {
    return new PodAdded__Params(this);
  }
}

export class PodAdded__Params {
  _event: PodAdded;

  constructor(event: PodAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pod(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PodRemoved extends ethereum.Event {
  get params(): PodRemoved__Params {
    return new PodRemoved__Params(this);
  }
}

export class PodRemoved__Params {
  _event: PodRemoved;

  constructor(event: PodRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pod(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class St1inch__depositorsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getLockTime(): BigInt {
    return this.value0;
  }

  getUnlockTime(): BigInt {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }
}

export class St1inch__earlyWithdrawLossResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getLoss(): BigInt {
    return this.value0;
  }

  getRet(): BigInt {
    return this.value1;
  }

  getCanWithdraw(): boolean {
    return this.value2;
  }
}

export class St1inch extends ethereum.SmartContract {
  static bind(address: Address): St1inch {
    return new St1inch("St1inch", address);
  }

  MAX_LOCK_PERIOD(): BigInt {
    let result = super.call(
      "MAX_LOCK_PERIOD",
      "MAX_LOCK_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_LOCK_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_LOCK_PERIOD",
      "MAX_LOCK_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_LOCK_PERIOD(): BigInt {
    let result = super.call(
      "MIN_LOCK_PERIOD",
      "MIN_LOCK_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_LOCK_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_LOCK_PERIOD",
      "MIN_LOCK_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(param0: Address, param1: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_approve(param0: Address, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  defaultFarm(): Address {
    let result = super.call("defaultFarm", "defaultFarm():(address)", []);

    return result[0].toAddress();
  }

  try_defaultFarm(): ethereum.CallResult<Address> {
    let result = super.tryCall("defaultFarm", "defaultFarm():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositors(param0: Address): St1inch__depositorsResult {
    let result = super.call(
      "depositors",
      "depositors(address):(uint40,uint40,uint176)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new St1inch__depositorsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_depositors(
    param0: Address
  ): ethereum.CallResult<St1inch__depositorsResult> {
    let result = super.tryCall(
      "depositors",
      "depositors(address):(uint40,uint40,uint176)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new St1inch__depositorsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  earlyWithdrawLoss(account: Address): St1inch__earlyWithdrawLossResult {
    let result = super.call(
      "earlyWithdrawLoss",
      "earlyWithdrawLoss(address):(uint256,uint256,bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return new St1inch__earlyWithdrawLossResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_earlyWithdrawLoss(
    account: Address
  ): ethereum.CallResult<St1inch__earlyWithdrawLossResult> {
    let result = super.tryCall(
      "earlyWithdrawLoss",
      "earlyWithdrawLoss(address):(uint256,uint256,bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new St1inch__earlyWithdrawLossResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  emergencyExit(): boolean {
    let result = super.call("emergencyExit", "emergencyExit():(bool)", []);

    return result[0].toBoolean();
  }

  try_emergencyExit(): ethereum.CallResult<boolean> {
    let result = super.tryCall("emergencyExit", "emergencyExit():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  expBase(): BigInt {
    let result = super.call("expBase", "expBase():(uint256)", []);

    return result[0].toBigInt();
  }

  try_expBase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("expBase", "expBase():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeReceiver(): Address {
    let result = super.call("feeReceiver", "feeReceiver():(address)", []);

    return result[0].toAddress();
  }

  try_feeReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeReceiver", "feeReceiver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasPod(account: Address, pod: Address): boolean {
    let result = super.call("hasPod", "hasPod(address,address):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromAddress(pod)
    ]);

    return result[0].toBoolean();
  }

  try_hasPod(account: Address, pod: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasPod", "hasPod(address,address):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromAddress(pod)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxLossRatio(): BigInt {
    let result = super.call("maxLossRatio", "maxLossRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxLossRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxLossRatio", "maxLossRatio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minLockPeriodRatio(): BigInt {
    let result = super.call(
      "minLockPeriodRatio",
      "minLockPeriodRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minLockPeriodRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minLockPeriodRatio",
      "minLockPeriodRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  oneInch(): Address {
    let result = super.call("oneInch", "oneInch():(address)", []);

    return result[0].toAddress();
  }

  try_oneInch(): ethereum.CallResult<Address> {
    let result = super.tryCall("oneInch", "oneInch():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  origin(): BigInt {
    let result = super.call("origin", "origin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_origin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("origin", "origin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  podAt(account: Address, index: BigInt): Address {
    let result = super.call("podAt", "podAt(address,uint256):(address)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_podAt(account: Address, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("podAt", "podAt(address,uint256):(address)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  podBalanceOf(pod: Address, account: Address): BigInt {
    let result = super.call(
      "podBalanceOf",
      "podBalanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(pod), ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_podBalanceOf(
    pod: Address,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "podBalanceOf",
      "podBalanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(pod), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  podCallGasLimit(): BigInt {
    let result = super.call(
      "podCallGasLimit",
      "podCallGasLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_podCallGasLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "podCallGasLimit",
      "podCallGasLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pods(account: Address): Array<Address> {
    let result = super.call("pods", "pods(address):(address[])", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toAddressArray();
  }

  try_pods(account: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("pods", "pods(address):(address[])", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  podsCount(account: Address): BigInt {
    let result = super.call("podsCount", "podsCount(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_podsCount(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("podsCount", "podsCount(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  podsLimit(): BigInt {
    let result = super.call("podsLimit", "podsLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_podsLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("podsLimit", "podsLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalDeposits(): BigInt {
    let result = super.call("totalDeposits", "totalDeposits():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDeposits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDeposits",
      "totalDeposits():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(param0: Address, param1: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(param0: Address, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(param0: Address, param1: Address, param2: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  votingPower(balance: BigInt): BigInt {
    let result = super.call("votingPower", "votingPower(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(balance)
    ]);

    return result[0].toBigInt();
  }

  try_votingPower(balance: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingPower",
      "votingPower(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(balance)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPowerAt(balance: BigInt, timestamp: BigInt): BigInt {
    let result = super.call(
      "votingPowerAt",
      "votingPowerAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(balance),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_votingPowerAt(
    balance: BigInt,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingPowerAt",
      "votingPowerAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(balance),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPowerOf(account: Address): BigInt {
    let result = super.call(
      "votingPowerOf",
      "votingPowerOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_votingPowerOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingPowerOf",
      "votingPowerOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPowerOfAt(account: Address, timestamp: BigInt): BigInt {
    let result = super.call(
      "votingPowerOfAt",
      "votingPowerOfAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_votingPowerOfAt(
    account: Address,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingPowerOfAt",
      "votingPowerOfAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get oneInch_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get expBase_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPodCall extends ethereum.Call {
  get inputs(): AddPodCall__Inputs {
    return new AddPodCall__Inputs(this);
  }

  get outputs(): AddPodCall__Outputs {
    return new AddPodCall__Outputs(this);
  }
}

export class AddPodCall__Inputs {
  _call: AddPodCall;

  constructor(call: AddPodCall) {
    this._call = call;
  }

  get pod(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddPodCall__Outputs {
  _call: AddPodCall;

  constructor(call: AddPodCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }
}

export class DepositForWithPermitCall extends ethereum.Call {
  get inputs(): DepositForWithPermitCall__Inputs {
    return new DepositForWithPermitCall__Inputs(this);
  }

  get outputs(): DepositForWithPermitCall__Outputs {
    return new DepositForWithPermitCall__Outputs(this);
  }
}

export class DepositForWithPermitCall__Inputs {
  _call: DepositForWithPermitCall;

  constructor(call: DepositForWithPermitCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get permit(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DepositForWithPermitCall__Outputs {
  _call: DepositForWithPermitCall;

  constructor(call: DepositForWithPermitCall) {
    this._call = call;
  }
}

export class DepositWithPermitCall extends ethereum.Call {
  get inputs(): DepositWithPermitCall__Inputs {
    return new DepositWithPermitCall__Inputs(this);
  }

  get outputs(): DepositWithPermitCall__Outputs {
    return new DepositWithPermitCall__Outputs(this);
  }
}

export class DepositWithPermitCall__Inputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get permit(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DepositWithPermitCall__Outputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }
}

export class EarlyWithdrawCall extends ethereum.Call {
  get inputs(): EarlyWithdrawCall__Inputs {
    return new EarlyWithdrawCall__Inputs(this);
  }

  get outputs(): EarlyWithdrawCall__Outputs {
    return new EarlyWithdrawCall__Outputs(this);
  }
}

export class EarlyWithdrawCall__Inputs {
  _call: EarlyWithdrawCall;

  constructor(call: EarlyWithdrawCall) {
    this._call = call;
  }

  get minReturn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxLoss(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EarlyWithdrawCall__Outputs {
  _call: EarlyWithdrawCall;

  constructor(call: EarlyWithdrawCall) {
    this._call = call;
  }
}

export class EarlyWithdrawToCall extends ethereum.Call {
  get inputs(): EarlyWithdrawToCall__Inputs {
    return new EarlyWithdrawToCall__Inputs(this);
  }

  get outputs(): EarlyWithdrawToCall__Outputs {
    return new EarlyWithdrawToCall__Outputs(this);
  }
}

export class EarlyWithdrawToCall__Inputs {
  _call: EarlyWithdrawToCall;

  constructor(call: EarlyWithdrawToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxLoss(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EarlyWithdrawToCall__Outputs {
  _call: EarlyWithdrawToCall;

  constructor(call: EarlyWithdrawToCall) {
    this._call = call;
  }
}

export class RemoveAllPodsCall extends ethereum.Call {
  get inputs(): RemoveAllPodsCall__Inputs {
    return new RemoveAllPodsCall__Inputs(this);
  }

  get outputs(): RemoveAllPodsCall__Outputs {
    return new RemoveAllPodsCall__Outputs(this);
  }
}

export class RemoveAllPodsCall__Inputs {
  _call: RemoveAllPodsCall;

  constructor(call: RemoveAllPodsCall) {
    this._call = call;
  }
}

export class RemoveAllPodsCall__Outputs {
  _call: RemoveAllPodsCall;

  constructor(call: RemoveAllPodsCall) {
    this._call = call;
  }
}

export class RemovePodCall extends ethereum.Call {
  get inputs(): RemovePodCall__Inputs {
    return new RemovePodCall__Inputs(this);
  }

  get outputs(): RemovePodCall__Outputs {
    return new RemovePodCall__Outputs(this);
  }
}

export class RemovePodCall__Inputs {
  _call: RemovePodCall;

  constructor(call: RemovePodCall) {
    this._call = call;
  }

  get pod(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemovePodCall__Outputs {
  _call: RemovePodCall;

  constructor(call: RemovePodCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueFundsCall extends ethereum.Call {
  get inputs(): RescueFundsCall__Inputs {
    return new RescueFundsCall__Inputs(this);
  }

  get outputs(): RescueFundsCall__Outputs {
    return new RescueFundsCall__Outputs(this);
  }
}

export class RescueFundsCall__Inputs {
  _call: RescueFundsCall;

  constructor(call: RescueFundsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RescueFundsCall__Outputs {
  _call: RescueFundsCall;

  constructor(call: RescueFundsCall) {
    this._call = call;
  }
}

export class SetDefaultFarmCall extends ethereum.Call {
  get inputs(): SetDefaultFarmCall__Inputs {
    return new SetDefaultFarmCall__Inputs(this);
  }

  get outputs(): SetDefaultFarmCall__Outputs {
    return new SetDefaultFarmCall__Outputs(this);
  }
}

export class SetDefaultFarmCall__Inputs {
  _call: SetDefaultFarmCall;

  constructor(call: SetDefaultFarmCall) {
    this._call = call;
  }

  get defaultFarm_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDefaultFarmCall__Outputs {
  _call: SetDefaultFarmCall;

  constructor(call: SetDefaultFarmCall) {
    this._call = call;
  }
}

export class SetEmergencyExitCall extends ethereum.Call {
  get inputs(): SetEmergencyExitCall__Inputs {
    return new SetEmergencyExitCall__Inputs(this);
  }

  get outputs(): SetEmergencyExitCall__Outputs {
    return new SetEmergencyExitCall__Outputs(this);
  }
}

export class SetEmergencyExitCall__Inputs {
  _call: SetEmergencyExitCall;

  constructor(call: SetEmergencyExitCall) {
    this._call = call;
  }

  get emergencyExit_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetEmergencyExitCall__Outputs {
  _call: SetEmergencyExitCall;

  constructor(call: SetEmergencyExitCall) {
    this._call = call;
  }
}

export class SetFeeReceiverCall extends ethereum.Call {
  get inputs(): SetFeeReceiverCall__Inputs {
    return new SetFeeReceiverCall__Inputs(this);
  }

  get outputs(): SetFeeReceiverCall__Outputs {
    return new SetFeeReceiverCall__Outputs(this);
  }
}

export class SetFeeReceiverCall__Inputs {
  _call: SetFeeReceiverCall;

  constructor(call: SetFeeReceiverCall) {
    this._call = call;
  }

  get feeReceiver_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeReceiverCall__Outputs {
  _call: SetFeeReceiverCall;

  constructor(call: SetFeeReceiverCall) {
    this._call = call;
  }
}

export class SetMaxLossRatioCall extends ethereum.Call {
  get inputs(): SetMaxLossRatioCall__Inputs {
    return new SetMaxLossRatioCall__Inputs(this);
  }

  get outputs(): SetMaxLossRatioCall__Outputs {
    return new SetMaxLossRatioCall__Outputs(this);
  }
}

export class SetMaxLossRatioCall__Inputs {
  _call: SetMaxLossRatioCall;

  constructor(call: SetMaxLossRatioCall) {
    this._call = call;
  }

  get maxLossRatio_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxLossRatioCall__Outputs {
  _call: SetMaxLossRatioCall;

  constructor(call: SetMaxLossRatioCall) {
    this._call = call;
  }
}

export class SetMinLockPeriodRatioCall extends ethereum.Call {
  get inputs(): SetMinLockPeriodRatioCall__Inputs {
    return new SetMinLockPeriodRatioCall__Inputs(this);
  }

  get outputs(): SetMinLockPeriodRatioCall__Outputs {
    return new SetMinLockPeriodRatioCall__Outputs(this);
  }
}

export class SetMinLockPeriodRatioCall__Inputs {
  _call: SetMinLockPeriodRatioCall;

  constructor(call: SetMinLockPeriodRatioCall) {
    this._call = call;
  }

  get minLockPeriodRatio_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinLockPeriodRatioCall__Outputs {
  _call: SetMinLockPeriodRatioCall;

  constructor(call: SetMinLockPeriodRatioCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawToCall extends ethereum.Call {
  get inputs(): WithdrawToCall__Inputs {
    return new WithdrawToCall__Inputs(this);
  }

  get outputs(): WithdrawToCall__Outputs {
    return new WithdrawToCall__Outputs(this);
  }
}

export class WithdrawToCall__Inputs {
  _call: WithdrawToCall;

  constructor(call: WithdrawToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawToCall__Outputs {
  _call: WithdrawToCall;

  constructor(call: WithdrawToCall) {
    this._call = call;
  }
}
