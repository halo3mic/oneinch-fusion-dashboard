import {
  assert,
  describe,
  test,
  clearStore,
  beforeAll,
  newMockCall, 
} from "matchstick-as/assembly/index"
import { Address, BigInt, Bytes, ethereum } from "@graphprotocol/graph-ts"
import { NonceIncreased } from "../generated/schema"
import { NonceIncreased as NonceIncreasedEvent } from "../generated/AggregationRouterV5/AggregationRouterV5"
import { handleFillOrder, handleSettleOrders } from "../src/settlement"
import {
  OrderCanceled,
  OrderFilled,
  Settlement,
  Transaction,
} from "../generated/schema"
import { SettleOrdersCall } from "../generated/Settlement/Settlement"
import { FillOrderCall } from "../generated/AggregationRouterV5Calls/AggregationRouterV5"



// Tests structure (matchstick-as >=0.5.0)
// https://thegraph.com/docs/en/developer/matchstick/#tests-structure-0-5-0

describe("Describe entity assertions", () => {

  beforeAll(() => {
    let maker = Address.fromString("0x0000000000000000000000000000000000000001")
    let newNonce = BigInt.fromI32(234)

    // create OrderFilled
    // crate settleOrder and fillOrder calls

    let settleOrderCall = createSettleOrderCall(maker, newNonce)
    handleSettleOrders(settleOrderCall)
  })

  afterAll(() => {
    clearStore()
  })

  // For more test scenarios, see:
  // https://thegraph.com/docs/en/developer/matchstick/#write-a-unit-test

  test("NonceIncreased created and stored", () => {
    assert.entityCount("NonceIncreased", 1)

    // 0xa16081f360e3847006db660bae1c6d1b2e17ec2a is the default address used in newMockEvent() function
    assert.fieldEquals(
      "NonceIncreased",
      "0xa16081f360e3847006db660bae1c6d1b2e17ec2a-1",
      "maker",
      "0x0000000000000000000000000000000000000001"
    )
    assert.fieldEquals(
      "NonceIncreased",
      "0xa16081f360e3847006db660bae1c6d1b2e17ec2a-1",
      "newNonce",
      "234"
    )

    // More assert options:
    // https://thegraph.com/docs/en/developer/matchstick/#asserts
  })


  function createSettleOrderCall(): SettleOrdersCall {
    let mockedCall = newMockCall()
    let call = new SettleOrdersCall()
    call.from = Address.fromHexString("0x9108813f22637385228a1c621c1904bbbc50dc25")
    call.to = Address.fromHexString("0xa88800cd213da5ae406ce248380802bd53b47647")
    call.inputValues = mockedCall.inputValues as ethereum.EventParam[]
    call.block = new ethereum.Block(16757016)
    call.inputValues.push(new ethereum.EventParam('data', ethereum.Value.fromBytes(Bytes.fromHexString("0x0965d04b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000008a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066fed96d00c723000000000000000000000000e789c5566b53546d46a0af48a4bd3f062d1fefd164029eab0000b42fe66200000000000000000000000000000000010dc9abb9a400000000000000000000000047b9f01b16e9c9cb99191dca68c9cc5bf6403957000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000001a2f4e01346af910fcf3662ff87f76ee03f46e40000000000000000000000008290dbccb15b5a516deee2805c58e56075d6605e000000000000000000000000a88800cd213da5ae406ce248380802bd53b4764700000000000000000000000000000000000000000000021e19e0c9bab24000000000000000000000000000000000000000000000000000000066fed96d00c7230000004c00000024000000240000002400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000c92cc2878d000064029f6800000000000001a2f4e01346af910fcf3662ff87f76ee03f46e48290dbccb15b5a516deee2805c58e56075d6605e01a2f4e01346af910fcf3662ff87f76ee03f46e40000000084d99aa569d93a9ca187d83734c8c4a519c4e9b1000000009108813f22637385228a1c621c1904bbbc50dc2500000000d1742b3c4fbb096990c8950fa635aec75b30781a000000002eb393fbac8aaa16047d4242033a25486e14f34500000000bd4dbe0cb9136ffb4955ede88ebd5e92222ad09a64029f232800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040afff5ff0e87e5f7eba4c565e8f50faab0e7a5426f3bb28eb8ebb7d7c9285e7df032575bcc5e410a1824e3942ab7c3359cd3294eb290db1f1257de528640e2a6d00000000000000000000000000000000000000000000000000000000000004e9a88800cd213da5ae406ce248380802bd53b4764701e789c5566b53546d46a0af48a4bd3f062d1fefd1000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003c87a1eb1b900000000000000000000000047b9f01b16e9c9cb99191dca68c9cc5bf6403957000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000946b9ebcad8cfe000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000011c9a62d04ed0c80000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000047b9f01b16e9c9cb99191dca68c9cc5bf6403957000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000001017f7df96be1780000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000047b9f01b16e9c9cb99191dca68c9cc5bf6403957000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000d873931f9a64029eab0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))))

  }


})
