// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Settlement extends ethereum.SmartContract {
  static bind(address: Address): Settlement {
    return new Settlement("Settlement", address);
  }

  availableCredit(account: Address): BigInt {
    let result = super.call(
      "availableCredit",
      "availableCredit(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_availableCredit(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableCredit",
      "availableCredit(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decreaseAvailableCredit(account: Address, amount: BigInt): BigInt {
    let result = super.call(
      "decreaseAvailableCredit",
      "decreaseAvailableCredit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_decreaseAvailableCredit(
    account: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decreaseAvailableCredit",
      "decreaseAvailableCredit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeBank(): Address {
    let result = super.call("feeBank", "feeBank():(address)", []);

    return result[0].toAddress();
  }

  try_feeBank(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeBank", "feeBank():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fillOrderInteraction(
    taker: Address,
    param1: BigInt,
    takingAmount: BigInt,
    interactiveData: Bytes
  ): BigInt {
    let result = super.call(
      "fillOrderInteraction",
      "fillOrderInteraction(address,uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(taker),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(takingAmount),
        ethereum.Value.fromBytes(interactiveData)
      ]
    );

    return result[0].toBigInt();
  }

  try_fillOrderInteraction(
    taker: Address,
    param1: BigInt,
    takingAmount: BigInt,
    interactiveData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fillOrderInteraction",
      "fillOrderInteraction(address,uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(taker),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(takingAmount),
        ethereum.Value.fromBytes(interactiveData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAvailableCredit(account: Address, amount: BigInt): BigInt {
    let result = super.call(
      "increaseAvailableCredit",
      "increaseAvailableCredit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_increaseAvailableCredit(
    account: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "increaseAvailableCredit",
      "increaseAvailableCredit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get limitOrderProtocol(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DecreaseAvailableCreditCall extends ethereum.Call {
  get inputs(): DecreaseAvailableCreditCall__Inputs {
    return new DecreaseAvailableCreditCall__Inputs(this);
  }

  get outputs(): DecreaseAvailableCreditCall__Outputs {
    return new DecreaseAvailableCreditCall__Outputs(this);
  }
}

export class DecreaseAvailableCreditCall__Inputs {
  _call: DecreaseAvailableCreditCall;

  constructor(call: DecreaseAvailableCreditCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAvailableCreditCall__Outputs {
  _call: DecreaseAvailableCreditCall;

  constructor(call: DecreaseAvailableCreditCall) {
    this._call = call;
  }

  get allowance(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FillOrderInteractionCall extends ethereum.Call {
  get inputs(): FillOrderInteractionCall__Inputs {
    return new FillOrderInteractionCall__Inputs(this);
  }

  get outputs(): FillOrderInteractionCall__Outputs {
    return new FillOrderInteractionCall__Outputs(this);
  }
}

export class FillOrderInteractionCall__Inputs {
  _call: FillOrderInteractionCall;

  constructor(call: FillOrderInteractionCall) {
    this._call = call;
  }

  get taker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get takingAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get interactiveData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FillOrderInteractionCall__Outputs {
  _call: FillOrderInteractionCall;

  constructor(call: FillOrderInteractionCall) {
    this._call = call;
  }

  get result(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseAvailableCreditCall extends ethereum.Call {
  get inputs(): IncreaseAvailableCreditCall__Inputs {
    return new IncreaseAvailableCreditCall__Inputs(this);
  }

  get outputs(): IncreaseAvailableCreditCall__Outputs {
    return new IncreaseAvailableCreditCall__Outputs(this);
  }
}

export class IncreaseAvailableCreditCall__Inputs {
  _call: IncreaseAvailableCreditCall;

  constructor(call: IncreaseAvailableCreditCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAvailableCreditCall__Outputs {
  _call: IncreaseAvailableCreditCall;

  constructor(call: IncreaseAvailableCreditCall) {
    this._call = call;
  }

  get allowance(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SettleOrdersCall extends ethereum.Call {
  get inputs(): SettleOrdersCall__Inputs {
    return new SettleOrdersCall__Inputs(this);
  }

  get outputs(): SettleOrdersCall__Outputs {
    return new SettleOrdersCall__Outputs(this);
  }
}

export class SettleOrdersCall__Inputs {
  _call: SettleOrdersCall;

  constructor(call: SettleOrdersCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SettleOrdersCall__Outputs {
  _call: SettleOrdersCall;

  constructor(call: SettleOrdersCall) {
    this._call = call;
  }
}
