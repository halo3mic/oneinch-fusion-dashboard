// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NonceIncreased extends ethereum.Event {
  get params(): NonceIncreased__Params {
    return new NonceIncreased__Params(this);
  }
}

export class NonceIncreased__Params {
  _event: NonceIncreased;

  constructor(event: NonceIncreased) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newNonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OrderCanceled extends ethereum.Event {
  get params(): OrderCanceled__Params {
    return new OrderCanceled__Params(this);
  }
}

export class OrderCanceled__Params {
  _event: OrderCanceled;

  constructor(event: OrderCanceled) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get remainingRaw(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OrderFilled extends ethereum.Event {
  get params(): OrderFilled__Params {
    return new OrderFilled__Params(this);
  }
}

export class OrderFilled__Params {
  _event: OrderFilled;

  constructor(event: OrderFilled) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get remaining(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OrderFilledRFQ extends ethereum.Event {
  get params(): OrderFilledRFQ__Params {
    return new OrderFilledRFQ__Params(this);
  }
}

export class OrderFilledRFQ__Params {
  _event: OrderFilledRFQ;

  constructor(event: OrderFilledRFQ) {
    this._event = event;
  }

  get orderHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get makingAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AggregationRouterV5OwnershipTransferred extends ethereum.Event {
  get params(): AggregationRouterV5OwnershipTransferred__Params {
    return new AggregationRouterV5OwnershipTransferred__Params(this);
  }
}

export class AggregationRouterV5OwnershipTransferred__Params {
  _event: AggregationRouterV5OwnershipTransferred;

  constructor(event: AggregationRouterV5OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AggregationRouterV5__cancelOrderResult {
  value0: BigInt;
  value1: Bytes;

  constructor(value0: BigInt, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }

  getOrderRemaining(): BigInt {
    return this.value0;
  }

  getOrderHash(): Bytes {
    return this.value1;
  }
}

export class AggregationRouterV5__cancelOrderInputOrderStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get receiver(): Address {
    return this[4].toAddress();
  }

  get allowedSender(): Address {
    return this[5].toAddress();
  }

  get makingAmount(): BigInt {
    return this[6].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get offsets(): BigInt {
    return this[8].toBigInt();
  }

  get interactions(): Bytes {
    return this[9].toBytes();
  }
}

export class AggregationRouterV5__checkPredicateInputOrderStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get receiver(): Address {
    return this[4].toAddress();
  }

  get allowedSender(): Address {
    return this[5].toAddress();
  }

  get makingAmount(): BigInt {
    return this[6].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get offsets(): BigInt {
    return this[8].toBigInt();
  }

  get interactions(): Bytes {
    return this[9].toBytes();
  }
}

export class AggregationRouterV5__fillOrderRFQToWithPermitResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): Bytes {
    return this.value2;
  }
}

export class AggregationRouterV5__fillOrderRFQToWithPermitInputOrderStruct extends ethereum.Tuple {
  get info(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get allowedSender(): Address {
    return this[4].toAddress();
  }

  get makingAmount(): BigInt {
    return this[5].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[6].toBigInt();
  }
}

export class AggregationRouterV5__fillOrderToWithPermitResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): Bytes {
    return this.value2;
  }
}

export class AggregationRouterV5__fillOrderToWithPermitInputOrderStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get receiver(): Address {
    return this[4].toAddress();
  }

  get allowedSender(): Address {
    return this[5].toAddress();
  }

  get makingAmount(): BigInt {
    return this[6].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get offsets(): BigInt {
    return this[8].toBigInt();
  }

  get interactions(): Bytes {
    return this[9].toBytes();
  }
}

export class AggregationRouterV5__hashOrderInputOrderStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get receiver(): Address {
    return this[4].toAddress();
  }

  get allowedSender(): Address {
    return this[5].toAddress();
  }

  get makingAmount(): BigInt {
    return this[6].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get offsets(): BigInt {
    return this[8].toBigInt();
  }

  get interactions(): Bytes {
    return this[9].toBytes();
  }
}

export class AggregationRouterV5 extends ethereum.SmartContract {
  static bind(address: Address): AggregationRouterV5 {
    return new AggregationRouterV5("AggregationRouterV5", address);
  }

  and(offsets: BigInt, data: Bytes): boolean {
    let result = super.call("and", "and(uint256,bytes):(bool)", [
      ethereum.Value.fromUnsignedBigInt(offsets),
      ethereum.Value.fromBytes(data)
    ]);

    return result[0].toBoolean();
  }

  try_and(offsets: BigInt, data: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("and", "and(uint256,bytes):(bool)", [
      ethereum.Value.fromUnsignedBigInt(offsets),
      ethereum.Value.fromBytes(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  arbitraryStaticCall(target: Address, data: Bytes): BigInt {
    let result = super.call(
      "arbitraryStaticCall",
      "arbitraryStaticCall(address,bytes):(uint256)",
      [ethereum.Value.fromAddress(target), ethereum.Value.fromBytes(data)]
    );

    return result[0].toBigInt();
  }

  try_arbitraryStaticCall(
    target: Address,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "arbitraryStaticCall",
      "arbitraryStaticCall(address,bytes):(uint256)",
      [ethereum.Value.fromAddress(target), ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelOrder(
    order: AggregationRouterV5__cancelOrderInputOrderStruct
  ): AggregationRouterV5__cancelOrderResult {
    let result = super.call(
      "cancelOrder",
      "cancelOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes)):(uint256,bytes32)",
      [ethereum.Value.fromTuple(order)]
    );

    return new AggregationRouterV5__cancelOrderResult(
      result[0].toBigInt(),
      result[1].toBytes()
    );
  }

  try_cancelOrder(
    order: AggregationRouterV5__cancelOrderInputOrderStruct
  ): ethereum.CallResult<AggregationRouterV5__cancelOrderResult> {
    let result = super.tryCall(
      "cancelOrder",
      "cancelOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes)):(uint256,bytes32)",
      [ethereum.Value.fromTuple(order)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AggregationRouterV5__cancelOrderResult(
        value[0].toBigInt(),
        value[1].toBytes()
      )
    );
  }

  checkPredicate(
    order: AggregationRouterV5__checkPredicateInputOrderStruct
  ): boolean {
    let result = super.call(
      "checkPredicate",
      "checkPredicate((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes)):(bool)",
      [ethereum.Value.fromTuple(order)]
    );

    return result[0].toBoolean();
  }

  try_checkPredicate(
    order: AggregationRouterV5__checkPredicateInputOrderStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkPredicate",
      "checkPredicate((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes)):(bool)",
      [ethereum.Value.fromTuple(order)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  clipperSwapToWithPermit(
    clipperExchange: Address,
    recipient: Address,
    srcToken: Address,
    dstToken: Address,
    inputAmount: BigInt,
    outputAmount: BigInt,
    goodUntil: BigInt,
    r: Bytes,
    vs: Bytes,
    permit: Bytes
  ): BigInt {
    let result = super.call(
      "clipperSwapToWithPermit",
      "clipperSwapToWithPermit(address,address,address,address,uint256,uint256,uint256,bytes32,bytes32,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(clipperExchange),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(srcToken),
        ethereum.Value.fromAddress(dstToken),
        ethereum.Value.fromUnsignedBigInt(inputAmount),
        ethereum.Value.fromUnsignedBigInt(outputAmount),
        ethereum.Value.fromUnsignedBigInt(goodUntil),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(vs),
        ethereum.Value.fromBytes(permit)
      ]
    );

    return result[0].toBigInt();
  }

  try_clipperSwapToWithPermit(
    clipperExchange: Address,
    recipient: Address,
    srcToken: Address,
    dstToken: Address,
    inputAmount: BigInt,
    outputAmount: BigInt,
    goodUntil: BigInt,
    r: Bytes,
    vs: Bytes,
    permit: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "clipperSwapToWithPermit",
      "clipperSwapToWithPermit(address,address,address,address,uint256,uint256,uint256,bytes32,bytes32,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(clipperExchange),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(srcToken),
        ethereum.Value.fromAddress(dstToken),
        ethereum.Value.fromUnsignedBigInt(inputAmount),
        ethereum.Value.fromUnsignedBigInt(outputAmount),
        ethereum.Value.fromUnsignedBigInt(goodUntil),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(vs),
        ethereum.Value.fromBytes(permit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eq(value: BigInt, data: Bytes): boolean {
    let result = super.call("eq", "eq(uint256,bytes):(bool)", [
      ethereum.Value.fromUnsignedBigInt(value),
      ethereum.Value.fromBytes(data)
    ]);

    return result[0].toBoolean();
  }

  try_eq(value: BigInt, data: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("eq", "eq(uint256,bytes):(bool)", [
      ethereum.Value.fromUnsignedBigInt(value),
      ethereum.Value.fromBytes(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fillOrderRFQToWithPermit(
    order: AggregationRouterV5__fillOrderRFQToWithPermitInputOrderStruct,
    signature: Bytes,
    flagsAndAmount: BigInt,
    target: Address,
    permit: Bytes
  ): AggregationRouterV5__fillOrderRFQToWithPermitResult {
    let result = super.call(
      "fillOrderRFQToWithPermit",
      "fillOrderRFQToWithPermit((uint256,address,address,address,address,uint256,uint256),bytes,uint256,address,bytes):(uint256,uint256,bytes32)",
      [
        ethereum.Value.fromTuple(order),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromUnsignedBigInt(flagsAndAmount),
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromBytes(permit)
      ]
    );

    return new AggregationRouterV5__fillOrderRFQToWithPermitResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes()
    );
  }

  try_fillOrderRFQToWithPermit(
    order: AggregationRouterV5__fillOrderRFQToWithPermitInputOrderStruct,
    signature: Bytes,
    flagsAndAmount: BigInt,
    target: Address,
    permit: Bytes
  ): ethereum.CallResult<AggregationRouterV5__fillOrderRFQToWithPermitResult> {
    let result = super.tryCall(
      "fillOrderRFQToWithPermit",
      "fillOrderRFQToWithPermit((uint256,address,address,address,address,uint256,uint256),bytes,uint256,address,bytes):(uint256,uint256,bytes32)",
      [
        ethereum.Value.fromTuple(order),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromUnsignedBigInt(flagsAndAmount),
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromBytes(permit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AggregationRouterV5__fillOrderRFQToWithPermitResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes()
      )
    );
  }

  fillOrderToWithPermit(
    order: AggregationRouterV5__fillOrderToWithPermitInputOrderStruct,
    signature: Bytes,
    interaction: Bytes,
    makingAmount: BigInt,
    takingAmount: BigInt,
    skipPermitAndThresholdAmount: BigInt,
    target: Address,
    permit: Bytes
  ): AggregationRouterV5__fillOrderToWithPermitResult {
    let result = super.call(
      "fillOrderToWithPermit",
      "fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address,bytes):(uint256,uint256,bytes32)",
      [
        ethereum.Value.fromTuple(order),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromBytes(interaction),
        ethereum.Value.fromUnsignedBigInt(makingAmount),
        ethereum.Value.fromUnsignedBigInt(takingAmount),
        ethereum.Value.fromUnsignedBigInt(skipPermitAndThresholdAmount),
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromBytes(permit)
      ]
    );

    return new AggregationRouterV5__fillOrderToWithPermitResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes()
    );
  }

  try_fillOrderToWithPermit(
    order: AggregationRouterV5__fillOrderToWithPermitInputOrderStruct,
    signature: Bytes,
    interaction: Bytes,
    makingAmount: BigInt,
    takingAmount: BigInt,
    skipPermitAndThresholdAmount: BigInt,
    target: Address,
    permit: Bytes
  ): ethereum.CallResult<AggregationRouterV5__fillOrderToWithPermitResult> {
    let result = super.tryCall(
      "fillOrderToWithPermit",
      "fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address,bytes):(uint256,uint256,bytes32)",
      [
        ethereum.Value.fromTuple(order),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromBytes(interaction),
        ethereum.Value.fromUnsignedBigInt(makingAmount),
        ethereum.Value.fromUnsignedBigInt(takingAmount),
        ethereum.Value.fromUnsignedBigInt(skipPermitAndThresholdAmount),
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromBytes(permit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AggregationRouterV5__fillOrderToWithPermitResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes()
      )
    );
  }

  gt(value: BigInt, data: Bytes): boolean {
    let result = super.call("gt", "gt(uint256,bytes):(bool)", [
      ethereum.Value.fromUnsignedBigInt(value),
      ethereum.Value.fromBytes(data)
    ]);

    return result[0].toBoolean();
  }

  try_gt(value: BigInt, data: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("gt", "gt(uint256,bytes):(bool)", [
      ethereum.Value.fromUnsignedBigInt(value),
      ethereum.Value.fromBytes(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hashOrder(order: AggregationRouterV5__hashOrderInputOrderStruct): Bytes {
    let result = super.call(
      "hashOrder",
      "hashOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes)):(bytes32)",
      [ethereum.Value.fromTuple(order)]
    );

    return result[0].toBytes();
  }

  try_hashOrder(
    order: AggregationRouterV5__hashOrderInputOrderStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashOrder",
      "hashOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes)):(bytes32)",
      [ethereum.Value.fromTuple(order)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  invalidatorForOrderRFQ(maker: Address, slot: BigInt): BigInt {
    let result = super.call(
      "invalidatorForOrderRFQ",
      "invalidatorForOrderRFQ(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(maker),
        ethereum.Value.fromUnsignedBigInt(slot)
      ]
    );

    return result[0].toBigInt();
  }

  try_invalidatorForOrderRFQ(
    maker: Address,
    slot: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "invalidatorForOrderRFQ",
      "invalidatorForOrderRFQ(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(maker),
        ethereum.Value.fromUnsignedBigInt(slot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lt(value: BigInt, data: Bytes): boolean {
    let result = super.call("lt", "lt(uint256,bytes):(bool)", [
      ethereum.Value.fromUnsignedBigInt(value),
      ethereum.Value.fromBytes(data)
    ]);

    return result[0].toBoolean();
  }

  try_lt(value: BigInt, data: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("lt", "lt(uint256,bytes):(bool)", [
      ethereum.Value.fromUnsignedBigInt(value),
      ethereum.Value.fromBytes(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nonce(param0: Address): BigInt {
    let result = super.call("nonce", "nonce(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonce(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonce", "nonce(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonceEquals(makerAddress: Address, makerNonce: BigInt): boolean {
    let result = super.call(
      "nonceEquals",
      "nonceEquals(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(makerAddress),
        ethereum.Value.fromUnsignedBigInt(makerNonce)
      ]
    );

    return result[0].toBoolean();
  }

  try_nonceEquals(
    makerAddress: Address,
    makerNonce: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nonceEquals",
      "nonceEquals(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(makerAddress),
        ethereum.Value.fromUnsignedBigInt(makerNonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  or(offsets: BigInt, data: Bytes): boolean {
    let result = super.call("or", "or(uint256,bytes):(bool)", [
      ethereum.Value.fromUnsignedBigInt(offsets),
      ethereum.Value.fromBytes(data)
    ]);

    return result[0].toBoolean();
  }

  try_or(offsets: BigInt, data: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("or", "or(uint256,bytes):(bool)", [
      ethereum.Value.fromUnsignedBigInt(offsets),
      ethereum.Value.fromBytes(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  remaining(orderHash: Bytes): BigInt {
    let result = super.call("remaining", "remaining(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(orderHash)
    ]);

    return result[0].toBigInt();
  }

  try_remaining(orderHash: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("remaining", "remaining(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(orderHash)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  remainingRaw(orderHash: Bytes): BigInt {
    let result = super.call("remainingRaw", "remainingRaw(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(orderHash)
    ]);

    return result[0].toBigInt();
  }

  try_remainingRaw(orderHash: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingRaw",
      "remainingRaw(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(orderHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  remainingsRaw(orderHashes: Array<Bytes>): Array<BigInt> {
    let result = super.call(
      "remainingsRaw",
      "remainingsRaw(bytes32[]):(uint256[])",
      [ethereum.Value.fromFixedBytesArray(orderHashes)]
    );

    return result[0].toBigIntArray();
  }

  try_remainingsRaw(
    orderHashes: Array<Bytes>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "remainingsRaw",
      "remainingsRaw(bytes32[]):(uint256[])",
      [ethereum.Value.fromFixedBytesArray(orderHashes)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  timestampBelow(time: BigInt): boolean {
    let result = super.call(
      "timestampBelow",
      "timestampBelow(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(time)]
    );

    return result[0].toBoolean();
  }

  try_timestampBelow(time: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "timestampBelow",
      "timestampBelow(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(time)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  timestampBelowAndNonceEquals(timeNonceAccount: BigInt): boolean {
    let result = super.call(
      "timestampBelowAndNonceEquals",
      "timestampBelowAndNonceEquals(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(timeNonceAccount)]
    );

    return result[0].toBoolean();
  }

  try_timestampBelowAndNonceEquals(
    timeNonceAccount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "timestampBelowAndNonceEquals",
      "timestampBelowAndNonceEquals(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(timeNonceAccount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uniswapV3SwapToWithPermit(
    recipient: Address,
    srcToken: Address,
    amount: BigInt,
    minReturn: BigInt,
    pools: Array<BigInt>,
    permit: Bytes
  ): BigInt {
    let result = super.call(
      "uniswapV3SwapToWithPermit",
      "uniswapV3SwapToWithPermit(address,address,uint256,uint256,uint256[],bytes):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(srcToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minReturn),
        ethereum.Value.fromUnsignedBigIntArray(pools),
        ethereum.Value.fromBytes(permit)
      ]
    );

    return result[0].toBigInt();
  }

  try_uniswapV3SwapToWithPermit(
    recipient: Address,
    srcToken: Address,
    amount: BigInt,
    minReturn: BigInt,
    pools: Array<BigInt>,
    permit: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "uniswapV3SwapToWithPermit",
      "uniswapV3SwapToWithPermit(address,address,uint256,uint256,uint256[],bytes):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(srcToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minReturn),
        ethereum.Value.fromUnsignedBigIntArray(pools),
        ethereum.Value.fromBytes(permit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unoswapToWithPermit(
    recipient: Address,
    srcToken: Address,
    amount: BigInt,
    minReturn: BigInt,
    pools: Array<BigInt>,
    permit: Bytes
  ): BigInt {
    let result = super.call(
      "unoswapToWithPermit",
      "unoswapToWithPermit(address,address,uint256,uint256,uint256[],bytes):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(srcToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minReturn),
        ethereum.Value.fromUnsignedBigIntArray(pools),
        ethereum.Value.fromBytes(permit)
      ]
    );

    return result[0].toBigInt();
  }

  try_unoswapToWithPermit(
    recipient: Address,
    srcToken: Address,
    amount: BigInt,
    minReturn: BigInt,
    pools: Array<BigInt>,
    permit: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unoswapToWithPermit",
      "unoswapToWithPermit(address,address,uint256,uint256,uint256[],bytes):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(srcToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minReturn),
        ethereum.Value.fromUnsignedBigIntArray(pools),
        ethereum.Value.fromBytes(permit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get weth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AdvanceNonceCall extends ethereum.Call {
  get inputs(): AdvanceNonceCall__Inputs {
    return new AdvanceNonceCall__Inputs(this);
  }

  get outputs(): AdvanceNonceCall__Outputs {
    return new AdvanceNonceCall__Outputs(this);
  }
}

export class AdvanceNonceCall__Inputs {
  _call: AdvanceNonceCall;

  constructor(call: AdvanceNonceCall) {
    this._call = call;
  }

  get amount(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class AdvanceNonceCall__Outputs {
  _call: AdvanceNonceCall;

  constructor(call: AdvanceNonceCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get order(): CancelOrderCallOrderStruct {
    return changetype<CancelOrderCallOrderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get orderRemaining(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get orderHash(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class CancelOrderCallOrderStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get receiver(): Address {
    return this[4].toAddress();
  }

  get allowedSender(): Address {
    return this[5].toAddress();
  }

  get makingAmount(): BigInt {
    return this[6].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get offsets(): BigInt {
    return this[8].toBigInt();
  }

  get interactions(): Bytes {
    return this[9].toBytes();
  }
}

export class CancelOrderRFQCall extends ethereum.Call {
  get inputs(): CancelOrderRFQCall__Inputs {
    return new CancelOrderRFQCall__Inputs(this);
  }

  get outputs(): CancelOrderRFQCall__Outputs {
    return new CancelOrderRFQCall__Outputs(this);
  }
}

export class CancelOrderRFQCall__Inputs {
  _call: CancelOrderRFQCall;

  constructor(call: CancelOrderRFQCall) {
    this._call = call;
  }

  get orderInfo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelOrderRFQCall__Outputs {
  _call: CancelOrderRFQCall;

  constructor(call: CancelOrderRFQCall) {
    this._call = call;
  }
}

export class CancelOrderRFQ1Call extends ethereum.Call {
  get inputs(): CancelOrderRFQ1Call__Inputs {
    return new CancelOrderRFQ1Call__Inputs(this);
  }

  get outputs(): CancelOrderRFQ1Call__Outputs {
    return new CancelOrderRFQ1Call__Outputs(this);
  }
}

export class CancelOrderRFQ1Call__Inputs {
  _call: CancelOrderRFQ1Call;

  constructor(call: CancelOrderRFQ1Call) {
    this._call = call;
  }

  get orderInfo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get additionalMask(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelOrderRFQ1Call__Outputs {
  _call: CancelOrderRFQ1Call;

  constructor(call: CancelOrderRFQ1Call) {
    this._call = call;
  }
}

export class ClipperSwapCall extends ethereum.Call {
  get inputs(): ClipperSwapCall__Inputs {
    return new ClipperSwapCall__Inputs(this);
  }

  get outputs(): ClipperSwapCall__Outputs {
    return new ClipperSwapCall__Outputs(this);
  }
}

export class ClipperSwapCall__Inputs {
  _call: ClipperSwapCall;

  constructor(call: ClipperSwapCall) {
    this._call = call;
  }

  get clipperExchange(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get srcToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get dstToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get goodUntil(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get vs(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class ClipperSwapCall__Outputs {
  _call: ClipperSwapCall;

  constructor(call: ClipperSwapCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClipperSwapToCall extends ethereum.Call {
  get inputs(): ClipperSwapToCall__Inputs {
    return new ClipperSwapToCall__Inputs(this);
  }

  get outputs(): ClipperSwapToCall__Outputs {
    return new ClipperSwapToCall__Outputs(this);
  }
}

export class ClipperSwapToCall__Inputs {
  _call: ClipperSwapToCall;

  constructor(call: ClipperSwapToCall) {
    this._call = call;
  }

  get clipperExchange(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get srcToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get dstToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get goodUntil(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get vs(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class ClipperSwapToCall__Outputs {
  _call: ClipperSwapToCall;

  constructor(call: ClipperSwapToCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClipperSwapToWithPermitCall extends ethereum.Call {
  get inputs(): ClipperSwapToWithPermitCall__Inputs {
    return new ClipperSwapToWithPermitCall__Inputs(this);
  }

  get outputs(): ClipperSwapToWithPermitCall__Outputs {
    return new ClipperSwapToWithPermitCall__Outputs(this);
  }
}

export class ClipperSwapToWithPermitCall__Inputs {
  _call: ClipperSwapToWithPermitCall;

  constructor(call: ClipperSwapToWithPermitCall) {
    this._call = call;
  }

  get clipperExchange(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get srcToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get dstToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get goodUntil(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get vs(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get permit(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class ClipperSwapToWithPermitCall__Outputs {
  _call: ClipperSwapToWithPermitCall;

  constructor(call: ClipperSwapToWithPermitCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DestroyCall extends ethereum.Call {
  get inputs(): DestroyCall__Inputs {
    return new DestroyCall__Inputs(this);
  }

  get outputs(): DestroyCall__Outputs {
    return new DestroyCall__Outputs(this);
  }
}

export class DestroyCall__Inputs {
  _call: DestroyCall;

  constructor(call: DestroyCall) {
    this._call = call;
  }
}

export class DestroyCall__Outputs {
  _call: DestroyCall;

  constructor(call: DestroyCall) {
    this._call = call;
  }
}

export class FillOrderCall extends ethereum.Call {
  get inputs(): FillOrderCall__Inputs {
    return new FillOrderCall__Inputs(this);
  }

  get outputs(): FillOrderCall__Outputs {
    return new FillOrderCall__Outputs(this);
  }
}

export class FillOrderCall__Inputs {
  _call: FillOrderCall;

  constructor(call: FillOrderCall) {
    this._call = call;
  }

  get order(): FillOrderCallOrderStruct {
    return changetype<FillOrderCallOrderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get interaction(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get makingAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get takingAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get skipPermitAndThresholdAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class FillOrderCall__Outputs {
  _call: FillOrderCall;

  constructor(call: FillOrderCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.outputValues[2].value.toBytes();
  }
}

export class FillOrderCallOrderStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get receiver(): Address {
    return this[4].toAddress();
  }

  get allowedSender(): Address {
    return this[5].toAddress();
  }

  get makingAmount(): BigInt {
    return this[6].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get offsets(): BigInt {
    return this[8].toBigInt();
  }

  get interactions(): Bytes {
    return this[9].toBytes();
  }
}

export class FillOrderRFQCall extends ethereum.Call {
  get inputs(): FillOrderRFQCall__Inputs {
    return new FillOrderRFQCall__Inputs(this);
  }

  get outputs(): FillOrderRFQCall__Outputs {
    return new FillOrderRFQCall__Outputs(this);
  }
}

export class FillOrderRFQCall__Inputs {
  _call: FillOrderRFQCall;

  constructor(call: FillOrderRFQCall) {
    this._call = call;
  }

  get order(): FillOrderRFQCallOrderStruct {
    return changetype<FillOrderRFQCallOrderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get flagsAndAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FillOrderRFQCall__Outputs {
  _call: FillOrderRFQCall;

  constructor(call: FillOrderRFQCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.outputValues[2].value.toBytes();
  }
}

export class FillOrderRFQCallOrderStruct extends ethereum.Tuple {
  get info(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get allowedSender(): Address {
    return this[4].toAddress();
  }

  get makingAmount(): BigInt {
    return this[5].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[6].toBigInt();
  }
}

export class FillOrderRFQCompactCall extends ethereum.Call {
  get inputs(): FillOrderRFQCompactCall__Inputs {
    return new FillOrderRFQCompactCall__Inputs(this);
  }

  get outputs(): FillOrderRFQCompactCall__Outputs {
    return new FillOrderRFQCompactCall__Outputs(this);
  }
}

export class FillOrderRFQCompactCall__Inputs {
  _call: FillOrderRFQCompactCall;

  constructor(call: FillOrderRFQCompactCall) {
    this._call = call;
  }

  get order(): FillOrderRFQCompactCallOrderStruct {
    return changetype<FillOrderRFQCompactCallOrderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get r(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get vs(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get flagsAndAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class FillOrderRFQCompactCall__Outputs {
  _call: FillOrderRFQCompactCall;

  constructor(call: FillOrderRFQCompactCall) {
    this._call = call;
  }

  get filledMakingAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get filledTakingAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get orderHash(): Bytes {
    return this._call.outputValues[2].value.toBytes();
  }
}

export class FillOrderRFQCompactCallOrderStruct extends ethereum.Tuple {
  get info(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get allowedSender(): Address {
    return this[4].toAddress();
  }

  get makingAmount(): BigInt {
    return this[5].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[6].toBigInt();
  }
}

export class FillOrderRFQToCall extends ethereum.Call {
  get inputs(): FillOrderRFQToCall__Inputs {
    return new FillOrderRFQToCall__Inputs(this);
  }

  get outputs(): FillOrderRFQToCall__Outputs {
    return new FillOrderRFQToCall__Outputs(this);
  }
}

export class FillOrderRFQToCall__Inputs {
  _call: FillOrderRFQToCall;

  constructor(call: FillOrderRFQToCall) {
    this._call = call;
  }

  get order(): FillOrderRFQToCallOrderStruct {
    return changetype<FillOrderRFQToCallOrderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get flagsAndAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get target(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class FillOrderRFQToCall__Outputs {
  _call: FillOrderRFQToCall;

  constructor(call: FillOrderRFQToCall) {
    this._call = call;
  }

  get filledMakingAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get filledTakingAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get orderHash(): Bytes {
    return this._call.outputValues[2].value.toBytes();
  }
}

export class FillOrderRFQToCallOrderStruct extends ethereum.Tuple {
  get info(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get allowedSender(): Address {
    return this[4].toAddress();
  }

  get makingAmount(): BigInt {
    return this[5].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[6].toBigInt();
  }
}

export class FillOrderRFQToWithPermitCall extends ethereum.Call {
  get inputs(): FillOrderRFQToWithPermitCall__Inputs {
    return new FillOrderRFQToWithPermitCall__Inputs(this);
  }

  get outputs(): FillOrderRFQToWithPermitCall__Outputs {
    return new FillOrderRFQToWithPermitCall__Outputs(this);
  }
}

export class FillOrderRFQToWithPermitCall__Inputs {
  _call: FillOrderRFQToWithPermitCall;

  constructor(call: FillOrderRFQToWithPermitCall) {
    this._call = call;
  }

  get order(): FillOrderRFQToWithPermitCallOrderStruct {
    return changetype<FillOrderRFQToWithPermitCallOrderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get flagsAndAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get target(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get permit(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class FillOrderRFQToWithPermitCall__Outputs {
  _call: FillOrderRFQToWithPermitCall;

  constructor(call: FillOrderRFQToWithPermitCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.outputValues[2].value.toBytes();
  }
}

export class FillOrderRFQToWithPermitCallOrderStruct extends ethereum.Tuple {
  get info(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get allowedSender(): Address {
    return this[4].toAddress();
  }

  get makingAmount(): BigInt {
    return this[5].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[6].toBigInt();
  }
}

export class FillOrderToCall extends ethereum.Call {
  get inputs(): FillOrderToCall__Inputs {
    return new FillOrderToCall__Inputs(this);
  }

  get outputs(): FillOrderToCall__Outputs {
    return new FillOrderToCall__Outputs(this);
  }
}

export class FillOrderToCall__Inputs {
  _call: FillOrderToCall;

  constructor(call: FillOrderToCall) {
    this._call = call;
  }

  get order_(): FillOrderToCallOrder_Struct {
    return changetype<FillOrderToCallOrder_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get interaction(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get makingAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get takingAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get skipPermitAndThresholdAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get target(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class FillOrderToCall__Outputs {
  _call: FillOrderToCall;

  constructor(call: FillOrderToCall) {
    this._call = call;
  }

  get actualMakingAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get actualTakingAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get orderHash(): Bytes {
    return this._call.outputValues[2].value.toBytes();
  }
}

export class FillOrderToCallOrder_Struct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get receiver(): Address {
    return this[4].toAddress();
  }

  get allowedSender(): Address {
    return this[5].toAddress();
  }

  get makingAmount(): BigInt {
    return this[6].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get offsets(): BigInt {
    return this[8].toBigInt();
  }

  get interactions(): Bytes {
    return this[9].toBytes();
  }
}

export class FillOrderToWithPermitCall extends ethereum.Call {
  get inputs(): FillOrderToWithPermitCall__Inputs {
    return new FillOrderToWithPermitCall__Inputs(this);
  }

  get outputs(): FillOrderToWithPermitCall__Outputs {
    return new FillOrderToWithPermitCall__Outputs(this);
  }
}

export class FillOrderToWithPermitCall__Inputs {
  _call: FillOrderToWithPermitCall;

  constructor(call: FillOrderToWithPermitCall) {
    this._call = call;
  }

  get order(): FillOrderToWithPermitCallOrderStruct {
    return changetype<FillOrderToWithPermitCallOrderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get interaction(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get makingAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get takingAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get skipPermitAndThresholdAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get target(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get permit(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class FillOrderToWithPermitCall__Outputs {
  _call: FillOrderToWithPermitCall;

  constructor(call: FillOrderToWithPermitCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.outputValues[2].value.toBytes();
  }
}

export class FillOrderToWithPermitCallOrderStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get makerAsset(): Address {
    return this[1].toAddress();
  }

  get takerAsset(): Address {
    return this[2].toAddress();
  }

  get maker(): Address {
    return this[3].toAddress();
  }

  get receiver(): Address {
    return this[4].toAddress();
  }

  get allowedSender(): Address {
    return this[5].toAddress();
  }

  get makingAmount(): BigInt {
    return this[6].toBigInt();
  }

  get takingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get offsets(): BigInt {
    return this[8].toBigInt();
  }

  get interactions(): Bytes {
    return this[9].toBytes();
  }
}

export class IncreaseNonceCall extends ethereum.Call {
  get inputs(): IncreaseNonceCall__Inputs {
    return new IncreaseNonceCall__Inputs(this);
  }

  get outputs(): IncreaseNonceCall__Outputs {
    return new IncreaseNonceCall__Outputs(this);
  }
}

export class IncreaseNonceCall__Inputs {
  _call: IncreaseNonceCall;

  constructor(call: IncreaseNonceCall) {
    this._call = call;
  }
}

export class IncreaseNonceCall__Outputs {
  _call: IncreaseNonceCall;

  constructor(call: IncreaseNonceCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueFundsCall extends ethereum.Call {
  get inputs(): RescueFundsCall__Inputs {
    return new RescueFundsCall__Inputs(this);
  }

  get outputs(): RescueFundsCall__Outputs {
    return new RescueFundsCall__Outputs(this);
  }
}

export class RescueFundsCall__Inputs {
  _call: RescueFundsCall;

  constructor(call: RescueFundsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RescueFundsCall__Outputs {
  _call: RescueFundsCall;

  constructor(call: RescueFundsCall) {
    this._call = call;
  }
}

export class SimulateCall extends ethereum.Call {
  get inputs(): SimulateCall__Inputs {
    return new SimulateCall__Inputs(this);
  }

  get outputs(): SimulateCall__Outputs {
    return new SimulateCall__Outputs(this);
  }
}

export class SimulateCall__Inputs {
  _call: SimulateCall;

  constructor(call: SimulateCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SimulateCall__Outputs {
  _call: SimulateCall;

  constructor(call: SimulateCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get executor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get desc(): SwapCallDescStruct {
    return changetype<SwapCallDescStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get permit(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get spentAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapCallDescStruct extends ethereum.Tuple {
  get srcToken(): Address {
    return this[0].toAddress();
  }

  get dstToken(): Address {
    return this[1].toAddress();
  }

  get srcReceiver(): Address {
    return this[2].toAddress();
  }

  get dstReceiver(): Address {
    return this[3].toAddress();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }

  get minReturnAmount(): BigInt {
    return this[5].toBigInt();
  }

  get flags(): BigInt {
    return this[6].toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UniswapV3SwapCall extends ethereum.Call {
  get inputs(): UniswapV3SwapCall__Inputs {
    return new UniswapV3SwapCall__Inputs(this);
  }

  get outputs(): UniswapV3SwapCall__Outputs {
    return new UniswapV3SwapCall__Outputs(this);
  }
}

export class UniswapV3SwapCall__Inputs {
  _call: UniswapV3SwapCall;

  constructor(call: UniswapV3SwapCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pools(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UniswapV3SwapCall__Outputs {
  _call: UniswapV3SwapCall;

  constructor(call: UniswapV3SwapCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UniswapV3SwapCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3SwapCallbackCall__Inputs {
    return new UniswapV3SwapCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3SwapCallbackCall__Outputs {
    return new UniswapV3SwapCallbackCall__Outputs(this);
  }
}

export class UniswapV3SwapCallbackCall__Inputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }

  get amount0Delta(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Delta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3SwapCallbackCall__Outputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }
}

export class UniswapV3SwapToCall extends ethereum.Call {
  get inputs(): UniswapV3SwapToCall__Inputs {
    return new UniswapV3SwapToCall__Inputs(this);
  }

  get outputs(): UniswapV3SwapToCall__Outputs {
    return new UniswapV3SwapToCall__Outputs(this);
  }
}

export class UniswapV3SwapToCall__Inputs {
  _call: UniswapV3SwapToCall;

  constructor(call: UniswapV3SwapToCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get pools(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class UniswapV3SwapToCall__Outputs {
  _call: UniswapV3SwapToCall;

  constructor(call: UniswapV3SwapToCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UniswapV3SwapToWithPermitCall extends ethereum.Call {
  get inputs(): UniswapV3SwapToWithPermitCall__Inputs {
    return new UniswapV3SwapToWithPermitCall__Inputs(this);
  }

  get outputs(): UniswapV3SwapToWithPermitCall__Outputs {
    return new UniswapV3SwapToWithPermitCall__Outputs(this);
  }
}

export class UniswapV3SwapToWithPermitCall__Inputs {
  _call: UniswapV3SwapToWithPermitCall;

  constructor(call: UniswapV3SwapToWithPermitCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get srcToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get pools(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get permit(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class UniswapV3SwapToWithPermitCall__Outputs {
  _call: UniswapV3SwapToWithPermitCall;

  constructor(call: UniswapV3SwapToWithPermitCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnoswapCall extends ethereum.Call {
  get inputs(): UnoswapCall__Inputs {
    return new UnoswapCall__Inputs(this);
  }

  get outputs(): UnoswapCall__Outputs {
    return new UnoswapCall__Outputs(this);
  }
}

export class UnoswapCall__Inputs {
  _call: UnoswapCall;

  constructor(call: UnoswapCall) {
    this._call = call;
  }

  get srcToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get pools(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class UnoswapCall__Outputs {
  _call: UnoswapCall;

  constructor(call: UnoswapCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnoswapToCall extends ethereum.Call {
  get inputs(): UnoswapToCall__Inputs {
    return new UnoswapToCall__Inputs(this);
  }

  get outputs(): UnoswapToCall__Outputs {
    return new UnoswapToCall__Outputs(this);
  }
}

export class UnoswapToCall__Inputs {
  _call: UnoswapToCall;

  constructor(call: UnoswapToCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get srcToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get pools(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class UnoswapToCall__Outputs {
  _call: UnoswapToCall;

  constructor(call: UnoswapToCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnoswapToWithPermitCall extends ethereum.Call {
  get inputs(): UnoswapToWithPermitCall__Inputs {
    return new UnoswapToWithPermitCall__Inputs(this);
  }

  get outputs(): UnoswapToWithPermitCall__Outputs {
    return new UnoswapToWithPermitCall__Outputs(this);
  }
}

export class UnoswapToWithPermitCall__Inputs {
  _call: UnoswapToWithPermitCall;

  constructor(call: UnoswapToWithPermitCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get srcToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get pools(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get permit(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class UnoswapToWithPermitCall__Outputs {
  _call: UnoswapToWithPermitCall;

  constructor(call: UnoswapToWithPermitCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
