type PodFarm @entity(immutable: false) {
	id: Bytes!
	giftToken: Bytes!
	power: BigInt!
	rewards: BigInt!
}

type EmergencyExitSet @entity(immutable: true) {
	id: Bytes!
	status: Boolean! # bool
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type FeeReceiverSet @entity(immutable: true) {
	id: Bytes!
	receiver: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type MaxLossRatioSet @entity(immutable: true) {
	id: Bytes!
	ratio: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type MinLockPeriodRatioSet @entity(immutable: true) {
	id: Bytes!
	ratio: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
	id: Bytes!
	previousOwner: Bytes! # address
	newOwner: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type PodAdded @entity(immutable: true) {
	id: Bytes!
	account: Bytes! # address
	pod: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type PodRemoved @entity(immutable: true) {
	id: Bytes!
	account: Bytes! # address
	pod: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
	id: Bytes!
	from: Bytes! # address
	to: Bytes! # address
	value: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}
type PowerPodApproval @entity(immutable: true) {
	id: Bytes!
	owner: Bytes! # address
	spender: Bytes! # address
	value: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type PowerPodDefaultFarmSet @entity(immutable: true) {
	id: Bytes!
	defaultFarm: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type PowerPodEmergencyExitSet @entity(immutable: true) {
	id: Bytes!
	status: Boolean! # bool
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type PowerPodFeeReceiverSet @entity(immutable: true) {
	id: Bytes!
	receiver: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type PowerPodMaxLossRatioSet @entity(immutable: true) {
	id: Bytes!
	ratio: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type PowerPodMinLockPeriodRatioSet @entity(immutable: true) {
	id: Bytes!
	ratio: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type PowerPodOwnershipTransferred @entity(immutable: true) {
	id: Bytes!
	previousOwner: Bytes! # address
	newOwner: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type PowerPodPodAdded @entity(immutable: true) {
	id: Bytes!
	account: Bytes! # address
	pod: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type PowerPodPodRemoved @entity(immutable: true) {
	id: Bytes!
	account: Bytes! # address
	pod: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type PowerPodTransfer @entity(immutable: true) {
	id: Bytes!
	from: Bytes! # address
	to: Bytes! # address
	value: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}
type WhitelistRegistryOwnershipTransferred @entity(immutable: true) {
	id: Bytes!
	previousOwner: Bytes! # address
	newOwner: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type Promotion @entity(immutable: true) {
	id: Bytes!
	promoter: Bytes! # address
	chainId: BigInt! # uint256
	promotee: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type Registered @entity(immutable: true) {
	id: Bytes!
	addr: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type ResolverThresholdSet @entity(immutable: true) {
	id: Bytes!
	resolverThreshold: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type Unregistered @entity(immutable: true) {
	id: Bytes!
	addr: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type WhitelistLimitSet @entity(immutable: true) {
	id: Bytes!
	whitelistLimit: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}
type NonceIncreased @entity(immutable: true) {
	id: Bytes!
	maker: Bytes! # address
	newNonce: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type OrderCanceled @entity(immutable: true) {
	id: Bytes!
	maker: Bytes! # address
	orderHash: Bytes! # bytes32
	remainingRaw: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type OrderFilled @entity(immutable: true) {
	id: Bytes!
	maker: Bytes! # address
	orderHash: Bytes! # bytes32
	remaining: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type OrderFilledRFQ @entity(immutable: true) {
	id: Bytes!
	orderHash: Bytes! # bytes32
	makingAmount: BigInt! # uint256
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type AggregationRouterV5OwnershipTransferred @entity(immutable: true) {
	id: Bytes!
	previousOwner: Bytes! # address
	newOwner: Bytes! # address
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
}

type Resolver @entity(immutable: false) {
	id: Bytes!
	resolvedCount: BigInt!
	pod: [PodFarm!]
}

type Token @entity(immutable: false) {
	id: Bytes!
	symbol: String!
	decimals: BigInt!
}

type Transaction @entity(immutable: true) {
	id: Bytes!
	block: BigInt!
	timestamp: BigInt!
	gasPrice: BigInt!
	gasUsed: BigInt!
}

type Settlement @entity(immutable: true) {
	id: Bytes!
	orderHash: Bytes!
	transaction: Transaction!
	resolver: Resolver!
	makerAsset: Token!
	takerAsset: Token!
	makingAmount: BigInt!
	takingAmountMin: BigInt!
	makingAmountActual: BigInt!
	takingAmountActual: BigInt
	receiver: Bytes!
	maker: Bytes!
	executor: Bytes!
	isPrivate: Boolean!
	interactiveFee: BigInt!
}

type ResolverTokenVolume @entity(immutable: true) {
	id: Bytes!
	resolver: Resolver!
	volume: BigInt!
	asset: Token!
}
